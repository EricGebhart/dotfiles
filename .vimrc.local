" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:

"Colorscheme and colors{
    set t_Co=256
    set background=dark
    "colorscheme murphy
    "colorscheme darkblack
    "colorscheme BlackSea"
    "colorscheme DarkZen
    "colorscheme DarkOcean
    "colorscheme Darkz
    "colorscheme midnight2
    colorscheme rdark

highlight cursorline term=underline cterm=underline guibg=#000000 

"}"

"Miscelaneous settings {

    set nospell   "Spelling was driving me crazy with underlines and highlighted words."

    set smartindent

    "incremental search, go as you type.
    set incsearch

    "let g:gundo_preview_bottom = 1

    set switchbuf=usetab,newtab

    set history=1000         " remember more commands and search history
    set undolevels=1000      " use many muchos levels of undo
    set wildignore=*.swp,*.bak,*.pyc,*.class
    set title                " change the terminal's title
    set visualbell           " don't beep
    set noerrorbells         " don't beep

    set nobackup
    set noswapfile

    cmap w!! w !sudo tee % >/dev/null  "Yes I really did want to write that file..."

"}"

"----------------tasklists----------------{
    "Another really useful thing is to mark some of your code as TODO
    "or FIXME! I know we all like to think we write perfect code, but
    "sometimes you just have to settle and leave a note for yourself to
    "come back later. One of the plugins we included was the tasklist
    "plugin that will allow us to search all open buffers for things to
    "fix.
    "Now you can hit <leader>td to open your task list and hit 'q' to
    "close it. You can also hit enter on the task to jump to the buffer
    "and line that it is placed on.

    map <leader>td <Plug>TaskList
"}"

" Open file commands {

    " You are editing a file called test.java in "/home/prog"
    " ,cd -> Current working directory now becomes "/home/prog"
    " ,e -> Expands to ":e /home/prog" so that you can just fill in the file name, say test.h.
    " ,e -> Expands to ":e /home"
    " tab -> Cycle through subdirectories of /home
    " enter -> cd to the directory you want say /home/prog
    " ,e -> Expands to ":e /home/prog"

    "Map keys for upload file to project host"
    nnoremap <leader>3 :silent !PM upload -f %<CR><CR>
    nnoremap <leader>8 :silent !PM upload<CR><CR>

    "edit file in current dir with path prompt.
    map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

    "set cd to current path
    map <leader>cd :cd %:p:h <CR>

 "}"

"map F1-F12 all sorts of things.{
    "Split windows, tabs F2-F3{
        "Next split 
        map <F2>  <C-W>w

        "Make window big"
        "map <F2>  <C-W>_

        "Next Window, make it big"
        "map <F2>  <C-W>w <C-W>_

        "Equalize all windows"
        "map <F2> <C-W>+

        "unsplit all"
        map <leader><F2> <C-w>o


        "map <S-F2>  <C-S-DOWN>  "next tab.
        "map <S-F2>  <C-S-UP>  "previous tab.

        " should be applescript to look for next zsh terminal window 
        ""map <F3> :!open -a iterm<CR><CR>
        "map <S-F3> :ConqueTermTab zsh
    "}

    "F4-F6 NerdTree, tagbar/ctags, buf exlporer, Ack {
        "Current directory
        map <F4> :NERDTree 
        map <leader><F4> TagbarToggle 

        map <leader><F5> :!/usr/local/bin/ctags -R .<CR>

        "Buffer list
        map <F5> :BufExplorer 

        "I never actually used this.
        "Open all buffers in tabs
        "map <S-F5> :tab sball<CR>
        "
        "---------Ack -- fuzzy searching all files-----------------{
            "The final tool that really speeds up navigating your code is the
            "Ack plugin. Ack is similar to grep, but much better in my opinion.
            "You can fuzzy text search for anything in your code (variable name,
            "class, method, etc) and it'll give you a list of files and line
            "numbers where they are defined so you can quickly cycle through
            "them. Just bind the searching to a key:

            ""nmap <leader>a <Esc>:Ack!
            map <leader><F6> <Esc>:Ack!
        "}
    "}

    " F6 - not implemented - SAS commands {

        " It maps f6 to run whatever SAS program I'm
        " currently editing, S-f6 jumps to the log file, and A-F6 jumps to the list
        " file.  

        "map <F6> :! sdssas %<CR>
        "map <S-F6> :e %<.log<CR>
        "map <A-F6> :e %<.lst<CR>
        " Execute file being edited with <Shift> + e:
        ""map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>

        "map <F7> --- applescript to look for or create build window.
    " }"

    " F10-F11 buffers and file loading {
        "Keep the working directory with us {i
            "Try to keep our current working directory with us.
            "set autochdir
            autocmd BufEnter * silent! lcd %:p:h
            "set path=$PWD/**  "didn't do what I thought it would.
            ""set path=%:p:h
        "}"
        
        "delete current buffer"
        map <F9> :bdelete! <CR>

        "F10 - Various ways to open a file. {}
            "map <F10> :find 
            map <F10> :e <C-R>=expand("%:p:h") . "/" <CR>
            map <A-F10> :tabe <C-R>=expand("%:p:h") . "/" <CR>
            "open file under cursor in a new tab (Ctrl-w gf)
            map <S-F10> <c-w>gf<CR>	 
        "}
        "F11 - F12   Next and previous buffer {
            " F12 and ^F12 are next and previous Tab in iterm2
            "next buffer, previous buffer
            map <F11> :bnext 
            map <S-F11> :bprev 
        "}
"}"

"what you need to know about GIT integration{
    "We installed 2 plugins, git.vim and fugitive, that give us all the
    "integration we need. Git.vim will provide us syntax highlighting
    "for git configuration files; fugitive provides a great interface
    "for interacting with git including getting diffs, status updates,
    "committing, and moving files.


    "The big commands you need to know:
    "Gblame: This allows you to view a line by line comparison of who the last person to touch that line of code is.
    "Gwrite: This will stage your file for commit, basically doing git add <filename>
    "Gread: This will basically run a git checkout <filename>
    "Gcommit: This will just run git commit. Since its in a vim buffer,
    "you can use keyword completion (Ctrl-N), like test_all<Ctrl-N> to
    "find the method name in your buffer and complete it for the commit
    "message. You can also use + and - on the filenames in the message
    "to stage/unstage them for the commit.
"} "

"================Window navigation ================== {
    "I also like to bind Ctrl+<movement> keys to move around the windows,
    "instead of using Ctrl+w + <movement>:
    "If only this made sense in dvorak.
    "map <c-j> <c-w>j
    "map <c-k> <c-w>k
    "map <c-l> <c-w>l
    "map <c-h> <c-w>h
"} "

 " Someone elses SAS KEYS - not in use {
    " autocmd BufRead *.log map <F10> :! doc_sas %<CR>
        " from sasfunctions.vim
        " Map RunSASonCurrentFile to a function key
        "  map <F10> :call RunSASonCurrentFile()<CR>
        " Map LoadSASLogLst to a function key
        "  map <F11> :call LoadSASLogLst()<CR>
        " Map CheckSASLog to a function key
        "  map <F12> :call CheckSASLog()<CR>
        " Add the virtualenv's site-packages to vim path
        "
    " }

au BufRead,BufNewFile *.tpl setfiletype=tpl

py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

